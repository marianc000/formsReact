{"version":3,"sources":["index.js"],"names":["MyTextInput","label","props","field","meta","useField","htmlFor","id","name","className","touched","error","MyCheckbox","children","type","StyledSelect","styled","select","StyledErrorMessage","div","StyledLabel","MySelect","SignupForm","initialValues","firstName","lastName","email","acceptedTerms","jobType","validationSchema","Yup","max","required","oneOf","onSubmit","async","values","actions","console","log","Promise","r","setTimeout","setSubmitting","isSubmitting","placeholder","value","disabled","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"mJAAA,gFAQA,MAAMA,EAAc,EAAGC,WAAUC,MAG/B,MAAOC,EAAOC,GAAQC,YAASH,GAC/B,OACE,qCACE,uBAAOI,QAASJ,EAAMK,IAAML,EAAMM,KAAlC,SAAyCP,IACzC,uBAAOQ,UAAU,gBAAiBN,KAAWD,IAC5CE,EAAKM,SAAWN,EAAKO,MACpB,qBAAKF,UAAU,QAAf,SAAwBL,EAAKO,QAC3B,SAKJC,EAAa,EAAGC,cAAaX,MACjC,MAAOC,EAAOC,GAAQC,YAAS,IAAKH,EAAOY,KAAM,aACjD,OACE,qCACE,wBAAOL,UAAU,WAAjB,UACE,0BAAWN,KAAWD,EAAOY,KAAK,aACjCD,KAEFT,EAAKM,SAAWN,EAAKO,MACpB,qBAAKF,UAAU,QAAf,SAAwBL,EAAKO,QAC3B,SAMJI,EAAeC,IAAOC,MAAO;;EAI7BC,EAAqBF,IAAOG,GAAI;;;;;;;;;;;;EAchCC,EAAcJ,IAAOf,KAAM;;EAI3BoB,EAAW,EAAGpB,WAAUC,MAG5B,MAAOC,EAAOC,GAAQC,YAASH,GAC/B,OACE,qCACE,cAACkB,EAAD,CAAad,QAASJ,EAAMK,IAAML,EAAMM,KAAxC,SAA+CP,IAC/C,cAACc,EAAD,IAAkBZ,KAAWD,IAC5BE,EAAKM,SAAWN,EAAKO,MACpB,cAACO,EAAD,UAAqBd,EAAKO,QACxB,SAMJW,EAAa,IAEf,qCACE,4CACA,cAAC,IAAD,CACEC,cAAe,CACbC,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,eAAe,EACfC,QAAS,IAEXC,iBAAkBC,IAAW,CAC3BN,UAAWM,MACRC,IAAI,GAAI,iCACRC,SAAS,YACZP,SAAUK,MACPC,IAAI,GAAI,iCACRC,SAAS,YACZN,MAAOI,MACJJ,MAAM,0BACNM,SAAS,YACZL,cAAeG,MACZE,SAAS,YACTC,MAAM,EAAC,GAAO,6CACjBL,QAASE,MAGNG,MACC,CAAC,WAAY,cAAe,UAAW,SACvC,oBAEDD,SAAS,cAEdE,SAAUC,MAAOC,EAAQC,KACvBC,QAAQC,IAAI,YAAaH,SACnB,IAAII,SAAQC,GAAKC,WAAWD,EAAG,OACrCJ,EAAQM,eAAc,IAjC1B,SAoCG,EAAGC,kBACF,eAAC,IAAD,WACE,cAAC5C,EAAD,CACEC,MAAM,aACNO,KAAK,YACLM,KAAK,OACL+B,YAAY,SAEd,cAAC7C,EAAD,CACEC,MAAM,YACNO,KAAK,WACLM,KAAK,OACL+B,YAAY,QAEd,cAAC7C,EAAD,CACEC,MAAM,gBACNO,KAAK,QACLM,KAAK,QACL+B,YAAY,oBAEd,eAACxB,EAAD,CAAUpB,MAAM,WAAWO,KAAK,UAAhC,UACE,wBAAQsC,MAAM,GAAd,+BACA,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,cAAd,uBACA,wBAAQA,MAAM,UAAd,6BACA,wBAAQA,MAAM,QAAd,sBAEF,cAAClC,EAAD,CAAYJ,KAAK,gBAAjB,+CAIA,wBAAQM,KAAK,SAASiC,SAAUH,EAAhC,4BAQZ,SAASI,IACP,OAAO,cAAC1B,EAAD,IAGT,MAAM2B,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAACL,EAAD,IAASC,K","file":"static/js/main.6a5127f4.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Formik, Form, useField, useFormikContext } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport styled from \"@emotion/styled\";\r\nimport \"./styles.css\";\r\nimport \"./styles-custom.css\";\r\n\r\nconst MyTextInput = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"text-input\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst MyCheckbox = ({ children, ...props }) => {\r\n  const [field, meta] = useField({ ...props, type: \"checkbox\" });\r\n  return (\r\n    <>\r\n      <label className=\"checkbox\">\r\n        <input {...field} {...props} type=\"checkbox\" />\r\n        {children}\r\n      </label>\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\n// Styled components ....\r\nconst StyledSelect = styled.select`\r\n  color: var(--blue);\r\n`;\r\n\r\nconst StyledErrorMessage = styled.div`\r\n  font-size: 12px;\r\n  color: var(--red-600);\r\n  width: 400px;\r\n  margin-top: 0.25rem;\r\n  &:before {\r\n    content: \"❌ \";\r\n    font-size: 10px;\r\n  }\r\n  @media (prefers-color-scheme: dark) {\r\n    color: var(--red-300);\r\n  }\r\n`;\r\n\r\nconst StyledLabel = styled.label`\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst MySelect = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <StyledLabel htmlFor={props.id || props.name}>{label}</StyledLabel>\r\n      <StyledSelect {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <StyledErrorMessage>{meta.error}</StyledErrorMessage>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\n// And now we can use these\r\nconst SignupForm = () => {\r\n  return (\r\n    <>\r\n      <h1>Subscribe!</h1>\r\n      <Formik\r\n        initialValues={{\r\n          firstName: \"\",\r\n          lastName: \"\",\r\n          email: \"\",\r\n          acceptedTerms: false, // added for our checkbox\r\n          jobType: \"\" // added for our select\r\n        }}\r\n        validationSchema={Yup.object({\r\n          firstName: Yup.string()\r\n            .max(15, \"Must be 15 characters or less\")\r\n            .required(\"Required\"),\r\n          lastName: Yup.string()\r\n            .max(20, \"Must be 20 characters or less\")\r\n            .required(\"Required\"),\r\n          email: Yup.string()\r\n            .email(\"Invalid email addresss\")\r\n            .required(\"Required\"),\r\n          acceptedTerms: Yup.boolean()\r\n            .required(\"Required\")\r\n            .oneOf([true], \"You must accept the terms and conditions.\"),\r\n          jobType: Yup.string()\r\n            // specify the set of valid values for job type\r\n            // @see http://bit.ly/yup-mixed-oneOf\r\n            .oneOf(\r\n              [\"designer\", \"development\", \"product\", \"other\"],\r\n              \"Invalid Job Type\"\r\n            )\r\n            .required(\"Required\")\r\n        })}\r\n        onSubmit={async (values, actions) => {\r\n          console.log(\">onSubmit\", values );\r\n          await new Promise(r => setTimeout(r, 5000));\r\n          actions.setSubmitting(false);\r\n        }}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <MyTextInput\r\n              label=\"First Name\"\r\n              name=\"firstName\"\r\n              type=\"text\"\r\n              placeholder=\"Jane\"\r\n            />\r\n            <MyTextInput\r\n              label=\"Last Name\"\r\n              name=\"lastName\"\r\n              type=\"text\"\r\n              placeholder=\"Doe\"\r\n            />\r\n            <MyTextInput\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              type=\"email\"\r\n              placeholder=\"jane@formik.com\"\r\n            />\r\n            <MySelect label=\"Job Type\" name=\"jobType\">\r\n              <option value=\"\">Select a job type</option>\r\n              <option value=\"designer\">Designer</option>\r\n              <option value=\"development\">Developer</option>\r\n              <option value=\"product\">Product Manager</option>\r\n              <option value=\"other\">Other</option>\r\n            </MySelect>\r\n            <MyCheckbox name=\"acceptedTerms\">\r\n              I accept the terms and conditions\r\n            </MyCheckbox>\r\n\r\n            <button type=\"submit\" disabled={isSubmitting}>Submit</button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nfunction App() {\r\n  return <SignupForm />;\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}